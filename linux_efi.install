
TMP=/tmp/linux_efi
EFIKEYS=/etc/efikeys

pre_upgrade() {
	mkdir $TMP
}
post_upgrade() {
	rm -rf $TMP
}

pre_install() {
	pre_upgrade
}

post_install() {
	if [[ ! -x $(which openssl) ]]; then
		# TODO: error: openssl unknown version installed?
		return
	elif [[ ! -x $(which efivar) ]]; then
		# TODO: error: efivar unknown version installed?
		return
	elif [[ ! -x $(which efibootmgr) ]]; then
		# TODO: error: efibootmgr unknown version installed?
		return
	fi

	[[ -e /etc/efi.key.pem && -e /etc/efi.pub.pem ]] && 
		echo "warn: keys already generated. skip generating new keys" || 
		keys_gen_install

	# TODO: check enable SecureBoot, and try install certs to it

	post_upgrade
}

err() {
    echo $* >&2
    exit 1
}

keys_gen_install() {
	# generate keys    
    openssl req -newkey rsa:4096 -nodes -keyout $TMP/key.pem -new -x509 -sha256 -days 3650 -subj "/CN=my Platform Key/" -out $TMP/pub.pem
    #openssl genrsa -out $TMP/key.pem 4096 || err generating key
	#openssl x509 -in $TMP/key.pem -outform PEM -pubkey -out $TMP/pub.pem || err extracting public key
	
    # convert public key to efi sign list
	cert-to-efi-sig-list $TMP/pub.pem $TMP/efi.esl || err converting pub key to efi sign list

	# add to list Microsoft keys for supporting dualboot
	cat $EFIKEYS/ms.esl $TMP/efi.esl > $TMP/db.esl

	# signing keys for using secureboot
	sign-efi-sig-list -k $TMP/key.pem -c $TMP/pub.pem PK $TMP/efi.esl $TMP/PK.auth || err signing PK
	sign-efi-sig-list -k $TMP/key.pem -c $TMP/pub.pem KEK $TMP/efi.esl $TMP/KEK.auth || err signing KEK
	sign-efi-sig-list -k $TMP/key.pem -c $TMP/pub.pem db $TMP/db.esl $TMP/db.auth || err signing db

	# install keys
	install -Dm400 $TMP/key.pem /etc/efi.key.pem
	install -Dm444 $TMP/pub.pem /etc/efi.pub.pem

	# install keys to $EFIKEYS
	install -Dm444 $TMP/PK.auth $EFIKEYS/
	install -Dm444 $TMP/KEK.auth $EFIKEYS/
	install -Dm444 $TMP/db.auth $EFIKEYS/
}

# vim: set ts=4 sw=0 noexpandtab autoindent :
